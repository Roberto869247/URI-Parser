;;; -*- Mode: Lisp -*-
;;; Pasta Roberto 869247

(defun string->stream (string)
  "Construct stream out of string"
  (coerce string 'list))

(defun stream->string (stream)
  "Turn stream back into the string"
  (coerce stream 'string))

(defun uri-parse (stringa)
  (cond ((stringp stringa)
         (accept-scheme (string->stream stringa)
                        (uri nil nil nil nil nil nil nil) ()))))  

(defun accept-scheme (list parsed pila)
  (cond ((null list) nil)
        ((identificatore (car list))
         (accept-scheme (cdr list) parsed (cons (car list) pila)))
        ((char= (car list) #\:)
         (if (is-special (stream->string (rev pila)))
             (accept-s (cdr list) (parsed-scheme parsed pila) nil)
           (accept-autority (cdr list) (parsed-scheme parsed pila) nil)))
        (t nil)))

(defun accept-autority (list parsed pila)
  (cond ((null list) (parsed-port parsed '(#\0 #\8)))
        ((and (char= (car list) #\/)
              (not (null (car (cdr list))))
              (char= (car (cdr list)) #\/)
              (not (null (car (cdr (cdr list)))))
              (char/= (car (cdr (cdr list))) #\@))
         (accept-userinfo (cdr (cdr list)) parsed ()))
        ((char= (car list) #\/)
         (cond ((null (car (cdr list))) parsed)
               ((and (not (is-special (uri-scheme parsed)))
                     (char= (car (cdr list)) #\?)
                     (accept-query (cdr (cdr list))
                                   (parsed-port parsed '(#\0 #\8)) ())))
               ((and (not (is-special (uri-scheme parsed)))
                     (char= (car (cdr list)) #\#)
                     (accept-fragment (cdr (cdr list))
                                      (parsed-port parsed '(#\0 #\8)) ())))
               (t (accept-path (cdr list)
                               (parsed-port parsed '(#\0 #\8)) pila))))
        (t nil)))

(defun accept-userinfo (list parsed pila)
  (cond ((null list) (accept-host list parsed pila))
        ((and (char= (car list) #\@)
              (not (null (car (cdr list))))
              (identificatore-host (car (cdr list))))
         (accept-host (cdr list) (parsed-userinfo parsed pila) ()))
        ((identificatore (car list))
         (accept-userinfo (cdr list) parsed (cons (car list) pila)))
        (t (accept-host list parsed pila))))

(defun accept-host (list parsed pila)
  (cond ((null list)
         (if (string-equal "zos" (uri-scheme parsed))
             nil
           (parsed-host (parsed-port parsed '(#\0 #\8)) pila)))
        ((and (char= (car list) #\.)
              (not (null (car (cdr list))))
              (identificatore-host (car (cdr list))))
         (accept-host (cdr list) parsed (cons (car list) pila)))
        ((identificatore-host (car list))
         (accept-host (cdr list) parsed (cons (car list) pila)))
        ((and (char= (car list) #\:)
              (not (null (car (cdr list))))
              (is-digit (car (cdr list)))
              (not (null pila)))
         (accept-port (cdr list) (parsed-host parsed pila) ()))
        ((and (char= (car list) #\/)
              (not (null (car (cdr list))))
              (char= (car (cdr list)) #\?)
              (not (null pila))
              (not (string-equal "zos" (uri-scheme parsed))))
         (accept-query (cdr (cdr list))
                       (parsed-host
                        (parsed-port parsed '(#\0 #\8)) pila) ()))
        ((and (char= (car list) #\/)
              (not (null (car (cdr list))))
              (char= (car (cdr list)) #\#)
              (not (null pila))
              (not (string-equal "zos" (uri-scheme parsed))))
         (accept-fragment (cdr (cdr list))
                          (parsed-host
                           (parsed-port parsed '(#\0 #\8)) pila) ()))
        ((and (char= (car list) #\/)
              (not (null (car (cdr list))))
              (char/= (car (cdr list)) #\/)
              (not (null pila)))
         (accept-path (cdr list)
                      (parsed-host
                       (parsed-port parsed '(#\0 #\8)) pila) ()))
        (t nil)))

(defun accept-port (list parsed pila)
  (cond ((null list)
         (if (string-equal "zos" (uri-scheme parsed))
             nil
           (parsed-port parsed pila)))
        ((is-digit (car list))
         (accept-port (cdr list) parsed (cons (car list) pila)))
        ((and (char= (car list) #\/)
              (not (null (car (cdr list))))
              (char/= (car (cdr list)) #\/))
         (accept-path (cdr list) (parsed-port parsed pila) ()))
        ((and (char= (car list) #\/)
              (not (null (car (cdr list))))
              (char= (car (cdr list)) #\?))
         (accept-query (cdr (cdr list))
                       (parsed-port parsed pila) ()))
        ((and (char= (car list) #\/)
              (not (null (car (cdr list))))
              (char= (car (cdr list)) #\#))
         (accept-fragment (cdr (cdr list))
                          (parsed-port parsed pila) ()))
        (t nil)))

(defun accept-path (list parsed pila)
  (cond ((null list)
         (if (not (null pila))
             (parsed-path parsed pila)
           nil))
        ((string-equal (uri-scheme parsed) "zos")
         (if (alpha-char-p (car list))
             (accept-zos44 list parsed pila 0)
           nil))
        ((and (char= (car list) #\/)
              (not (null (car (cdr list))))
              (identificatore (car (cdr list))))
         (accept-path (cdr list) parsed (cons (car list) pila)))
        ((identificatore (car list))
         (accept-path (cdr list) parsed (cons (car list) pila)))
        ((and (char= (car list) #\?)
              (not (null pila)))
         (accept-query (cdr list) (parsed-path parsed pila) ()))
        ((and (char= (car list) #\#)
              (not (null pila)))
         (accept-fragment (cdr list) (parsed-path parsed pila) ()))
        (t nil)))

(defun accept-query (list parsed pila)
  (cond ((null list)
         (if (not (null pila))
             (parsed-query parsed pila)
           nil))
        ((is-query (car list))
         (accept-query (cdr list) parsed (cons (car list) pila)))
        ((not (null pila))
         (accept-fragment (cdr list) (parsed-query parsed pila) ()))))

(defun accept-fragment (list parsed pila)
  (cond ((null list)
         (if (not (null pila))
             (parsed-fragment parsed pila)
           nil))
        (t (accept-fragment (cdr list) parsed (cons (car list) pila)))))

(defun accept-s (list parsed pila)
  (cond ((null list) parsed)
        ((and (string-equal (uri-scheme parsed) "mailto")
              (not (null (cdr list))))
         (accept-mailto list parsed ()))
        ((and (string-equal (uri-scheme parsed) "news")
              (not (null (cdr list)))
              (char/= (car list) #\.))
         (accept-s-host list parsed ()))
        ((and (string-equal (uri-scheme parsed) "tel")
              (not (null (cdr list))))
         (accept-tel list parsed ()))
        ((and (string-equal (uri-scheme parsed) "fax")
              (not (null (cdr list))))
         (accept-tel list parsed ()))
        ((and (string-equal (uri-scheme parsed) "zos")
              (not (null (cdr list))))
         (accept-autority list parsed ()))
        (t nil)))

(defun accept-mailto (list parsed pila)
  (cond ((null list) (parsed-userinfo parsed pila))
        ((identificatore (car list))
         (accept-mailto (cdr list) parsed (cons (car list) pila)))
        ((and (char= (car list) #\@)
              (not (null (car (cdr list))))
              (identificatore-host (car (cdr list))))
         (accept-s-host (cdr list) (parsed-userinfo parsed pila) ()))
        (t nil)))

(defun accept-s-host (list parsed pila)
  (cond ((null list) (parsed-host parsed pila))
        ((identificatore-host (car list))
         (accept-s-host (cdr list) parsed (cons (car list) pila)))
        ((and (char= (car list) #\.)
              (not (null (car (cdr list))))
              (identificatore-host (car (cdr list))))
         (accept-s-host (cdr list) parsed (cons (car list) pila)))
        (t nil)))

(defun accept-tel (list parsed pila)
  (cond ((null list) (parsed-userinfo parsed pila))
        ((identificatore (car list))
         (accept-tel (cdr list) parsed (cons (car list) pila)))
        (t nil)))

(defun accept-zos44 (list parsed pila n)
  (cond ((null list) (parsed-path parsed pila))
        ((and (< n 44)
              (or (is-digit (car list))
                  (alpha-char-p (car list))))
         (accept-zos44 (cdr list) parsed (cons (car list) pila) (+ n 1)))
        ((and (< n 44)
              (char= (car list) #\.)
              (not (null (car (cdr list))))
              (or (is-digit (car (cdr list)))
                  (alpha-char-p (car (cdr list)))))
         (accept-zos44 (cdr list) parsed (cons (car list) pila) (+ n 1)))
        ((and (< n 45)
              (char= (car list) #\()
              (not (null (cdr list)))
              (alpha-char-p (car (cdr list)))
              (char/= (car pila) #\.))
         (accept-zos8 (cdr list) parsed (cons (car list) pila) 0))
        ((and (< n 45)
              (or (char= (car list) #\?)
                  (char= (car list) #\#)))
         (accept-zos list parsed pila))
        (t nil)))

(defun accept-zos8 (list parsed pila n)
  (cond ((null list) nil)
        ((and (< n 8)
              (or (is-digit (car list))
                  (alpha-char-p (car list))))
         (accept-zos8 (cdr list) parsed (cons (car list) pila) (+ n 1)))
        ((and (< n 9)
              (char= (car list) #\)))
         (accept-zos (cdr list) parsed (cons (car list) pila)))
        (t nil)))

(defun accept-zos (list parsed pila)
  (cond ((null list) (parsed-path parsed pila))
        ((and (char= (car list) #\?)
              (not (null (cdr list))))
         (accept-query (cdr list) (parsed-path parsed pila) ()))
        ((and (char= (car list) #\#)
              (not (null (cdr list))))
         (accept-fragment (cdr list) (parsed-path parsed pila) ()))
        (t nil)))

(defun uri-display (x &optional s)
  (if (uri-p x)
      (if (or (null s)
              (eq s t))
          (stampa x
                  (list "Scheme:     ~A"
                        "Userinfo:   ~A"
                        "Host:       ~A"
                        "Port:       ~A"
                        "Path:       ~A"
                        "Query:      ~A"
                        "Fragment:   ~A"))
        (with-open-file (out s
                             :direction :output
                             :if-exists :supersede
                             :if-does-not-exist :create)
          (stampa x
                  (list "Scheme:     ~A"
                        "Userinfo:   ~A"
                        "Host:       ~A"
                        "Port:       ~A"
                        "Path:       ~A"
                        "Query:      ~A"
                        "Fragment:   ~A")
                  out)))
    nil))

(defun uri (scheme userinfo host port path query fragment)
  (list scheme userinfo host port path query fragment))

(defun uri-p (x)
  (and (listp x)
       (= (length x) 7)))

(defun uri-scheme (x)
  (if (uri-p x)
      (first x)
    nil))

(defun uri-userinfo (x)
  (if (uri-p x)
      (second x)
    nil))

(defun uri-host (x)
  (if (uri-p x)
      (third x)
    nil))

(defun uri-port (x)
  (if (uri-p x)
      (fourth x)
    nil))

(defun uri-path (x)
  (if (uri-p x)
      (fifth x)
    nil))

(defun uri-query (x)
  (if (uri-p x)
      (sixth x)
    nil))

(defun uri-fragment (x)
  (if (uri-p x)
      (seventh x)
    nil))

(defun rev (l)
  (cond ((null l) ())
        (t (append (rev (cdr l)) (list (car l))))))

(defun identificatore (x) 
  (if (eq x nil)
      nil
    (andlist (mapcar (lambda (k y) (char/= k y))
                     (createlist x 5) '(#\? #\@ #\/ #\# #\:)))))

(defun identificatore-host (x)
  (if (eq x nil)
      nil
    (andlist (mapcar (lambda (k y) (char/= k y))
                     (createlist x 6) '(#\. #\? #\# #\/ #\@ #\:)))))

(defun is-query (x)
  (if (eq x nil)
      nil
    ((lambda (y) (char/= x y)) #\#)))

(defun is-digit (x)
  (if (eq x nil)
      nil
    (orlist (mapcar (lambda (k y) (char= k y))
                    (createlist x 10)
                    '(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)))))

(defun is-special (x)
  (if (eq x nil)
      nil
    (orlist (mapcar (lambda (k y) (string-equal k y))
                    (createlist x 5)
                    '("mailto" "tel" "fax" "zos" "news")))))

(defun createlist (x n)
  (cond ((= n 0) ())
        (t (cons x (createlist x (- n 1))))))

(defun andlist (list)
  (cond ((null list) t)
        (t (and (car list) (andlist (cdr list))))))

(defun orlist (list)
  (cond ((null list) nil)
        (t (or (car list) (orlist (cdr list))))))

(defun parsed-scheme (x pila)
  (uri
   (stream->string (rev pila))
   (uri-userinfo x)
   (uri-host x)
   (uri-port x)
   (uri-path x)
   (uri-query x)
   (uri-fragment x)))

(defun parsed-userinfo (x pila)
  (uri
   (uri-scheme x)
   (stream->string (rev pila))
   (uri-host x)
   (uri-port x)
   (uri-path x)
   (uri-query x)
   (uri-fragment x)))

(defun parsed-host (x pila)
  (uri
   (uri-scheme x)
   (uri-userinfo x)
   (stream->string (rev pila))
   (uri-port x)
   (uri-path x)
   (uri-query x)
   (uri-fragment x)))

(defun parsed-port (x pila)
  (uri
   (uri-scheme x)
   (uri-userinfo x)
   (uri-host x)
   (parse-integer (stream->string (rev pila)))
   (uri-path x)
   (uri-query x)
   (uri-fragment x)))

(defun parsed-path (x pila)
  (uri
   (uri-scheme x)
   (uri-userinfo x)
   (uri-host x)
   (uri-port x)
   (stream->string (rev pila))
   (uri-query x)
   (uri-fragment x)))

(defun parsed-query (x pila)
  (uri
   (uri-scheme x)
   (uri-userinfo x)
   (uri-host x)
   (uri-port x)
   (uri-path x)
   (stream->string (rev pila))
   (uri-fragment x)))

(defun parsed-fragment (x pila)
  (uri
   (uri-scheme x)
   (uri-userinfo x)
   (uri-host x)
   (uri-port x)
   (uri-path x)
   (uri-query x)
   (stream->string (rev pila))))

(defun stampa (x list &optional out)
  (cond ((null list) nil)
        ((null out)
         ((lambda (k y)
            (format t k y))
          (car list)
          (car x))
         (terpri)
         (stampa (cdr x) (cdr list)))
        (t ((lambda (k y)
              (format out k y))
            (car list)
            (car x))
           (terpri out)
           (stampa (cdr x) (cdr list) out))))